#!/bin/bash

### help function
function help {
    log "HELP"
    cat <<END

    usage:

        $(basename $0) [options] -c | --command 'command'

    options:

        -h | --help         show this help
        -b | --batch        batch system to use ("pbsdsh" by default)
        -d | --delay        delay in seconds between individual jobs
        -q | --queue        scheduler queue ("long" by default)
        -n | --ncore        number of cores ("8" by default)
        -o | --option       option(s) to pass to job scheduler, in quotes
        -c | --command      command to run, given in quotes

END
}

### log function to write messages to standard output
function log {
    printf "EGSnrc $(date --rfc-3339=ns): $1\n"
}

### quit function (with optional command as $2)
function quit {
    lineno=$1
    msg=$2
    case $3 in
        help)  run="help";;
        *)     run="";;
    esac
    log "$(basename $0) line $lineno: $msg"; $run; log "QUIT."; exit 1
}

### begin script
log "BEGIN $0"

### show EGSnrc environment variables
log "EGSnrc environment:"
log "    HEN_HOUSE  = $HEN_HOUSE"
log "    EGS_HOME   = $EGS_HOME"
log "    EGS_CONFIG = $EGS_CONFIG"
hen_house=${HEN_HOUSE%/}
egs_home=${EGS_HOME%/}

### default option values
opt_batch="pbsdsh"
opt_queue="long"
opt_ncore="8"
opt_delay="0"
opt_command=""
opt_option=""

### parse command-line options (simplistic)
while [ "$#" -gt 0 ]; do
    opt=$1; shift
    arg=$1; shift
    case $opt in
        -h|--help)      help; exit;;
        -b|--batch)     opt_batch="$arg";;
        -q|--queue)     opt_queue="$arg";;
        -n|--ncore)     opt_ncore="$arg";;
        -d|--delay)     opt_delay="$arg";;
        -c|--command)   opt_cmd="$arg";;
        -o|--option)    opt_option="${opt_option}${opt_option:+" "}$arg"; arg="parsed";;
        *)              quit $LINENO "unknown option: $opt" help;;
    esac
    if [ -z "$arg" ] || [ "${arg:0:1}" = "-" ]; then
        quit $LINENO "missing argument to $opt option" help
    fi
done

### check that the batch option command exists and is executable
batch_script=$hen_house/scripts/egs-parallel-${opt_batch}
if ! [ -x "$(command -v ${batch_script})" ]; then
    quit $LINENO "no such batch option command found: ${batch_script}"
fi

### check that ncore is an integer
if ! [[ "$opt_ncore" =~ ^[0-9]+$ ]] ; then
    quit $LINENO "number of cores (-n option) is not an integer: $opt_ncore"
fi

### check that delay is an integer
if ! [[ "$opt_delay" =~ ^[0-9]+$ ]] ; then
    quit $LINENO "the delay (-d option) is not an integer: $opt_delay"
fi

### trap empty run command
if [ -z "$opt_cmd" ]; then
    quit $LINENO "missing command to run (-c option)" help
fi

### check run command and its arguments for input file and first job index
set -- $opt_cmd
cmd_app=$1
cmd_input=""
cmd_first="1"
if ! [ -x "$(command -v $cmd_app)" ]; then
    quit $LINENO "no such egsnrc executable found: $cmd_app"
fi
while [[ "$#" -gt 0 ]]; do
    opt=$1; shift
    case $opt in
        -i) arg=$1; cmd_input=$1; shift;;
        -f) arg=$1; cmd_first=$1; shift;;
        *)  arg="skip";;
    esac
    if [ -z "$arg" ] || [ "${arg:0:1}" = "-" ]; then
        quit $LINENO "missing argument to $opt option in run command: $opt_cmd"
    fi
done

### check first job index
if ! [[ $cmd_first =~ ^[0-9]+$ ]] ; then
    quit $LINENO "first job index (-f option) is not an integer: $opt_cmd"
fi

### check that an egs input filename is provided and set basename accordingly
if [ -z "$cmd_input" ]; then
    quit $LINENO "missing input file (-i option) in run command: $opt_cmd"
fi

### set simulation basename
basename="$(basename "$cmd_input" .egsinp)"

### check that the egs input file exists and is readable
egsinp=$egs_home/$cmd_app/$basename.egsinp
if ! [ -r $egsinp ]; then
    quit $LINENO "cannot access input file: $egsinp.egsinp"
fi

### check that there is not currently a .lock file associated with this input file
lock=$egs_home/$cmd_app/$basename.lock
if [ -e $lock ]; then
    quit $LINENO "there is already a lock file for $basename: $lock"
fi

### report command-line options
log "parallel options:"
log "    batch      = $opt_batch"
log "    queue      = $opt_queue"
log "    ncore      = $opt_ncore"
log "    delay      = $opt_delay"
log "    command    = $opt_cmd"
log "    basename   = $basename"
log "    first job  = $cmd_first"
log "    options    = $opt_option"

### go to egs application directory
log "cd $egs_home/$cmd_app"
cd $egs_home/$cmd_app

### exec script specific for this batch system
log "EXEC egs-parallel-$opt_batch $opt_queue $opt_ncore $opt_delay $cmd_first $basename '$opt_cmd' '$opt_option'"
exec $batch_script $opt_queue $opt_ncore $opt_delay $cmd_first $basename "$opt_cmd" "$opt_option"